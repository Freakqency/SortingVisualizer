{"version":3,"sources":["logo.svg","SortingAlgorithms/MergeSort.js","SortingAlgorithms/QuickSort.js","SortingAlgorithms/SelectionSort.js","SortingAlgorithms/BubbleSort.js","SortingVisualizer/SortingVisualizer.jsx","SortingAlgorithms/InsertionSort.js","App.js","index.js"],"names":["getMergeSortAnimations","array","animations","auxillaryArray","slice","mergeSort","length","javaScriptSortedArray","sort","a","b","console","log","firstArray","secondArray","i","arraysAreEqual","startIndex","endIndex","middleIndex","Math","floor","sortArray","j","push","merge","getQuickSortAnimations","quickSort","pivotIndex","min","max","random","swap","lessTailIndex","partitionArray","firstIndex","secondIndex","temp","getSelectionSortAnimations","N","minIndex","selectionSort","getBubbleSortAnimations","iters","swapped","bubbleSort","WINDOW_HEIGHT","window","innerHeight","PRIMARY_COLOR","SECONDARY_COLOR","DISABLED_BUTTON","ENABLED_BUTTON","SortingVisualizer","props","state","this","resetArray","setState","restoreStoreButtons","document","getElementById","disabled","buttonStyle","style","title","cursor","background","disableSortButtons","isColorChange","arrayBars","getElementsByClassName","barOneIndex","barTwoIndex","color","barOneStyle","barTwoStyle","setTimeout","backgroundColor","barOneIdx","newHeight","height","RESTORE_TIME","parseInt","barIndex","barStyle","key","insertionSort","getInsertionSortAnimations","className","position","right","map","value","idx","top","onClick","id","React","Component","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5010494f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","export function getMergeSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    mergeSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction mergeSort(auxillaryArray, startIndex, endIndex, animations) {\n    if(startIndex === endIndex)\n        return;\n    const middleIndex = Math.floor((startIndex + endIndex)/2);\n    mergeSort(auxillaryArray, startIndex, middleIndex, animations);\n    mergeSort(auxillaryArray, middleIndex + 1, endIndex, animations);\n    merge(auxillaryArray, startIndex, middleIndex, endIndex, animations);\n}\n\nfunction merge(auxillaryArray, startIndex, middleIndex, endIndex, animations) {\n    let sortArray = [];\n    let i = startIndex;\n    let j = middleIndex + 1;\n    while(i <= middleIndex && j <= endIndex) {\n        //Comparing value at ith and jth index so push them to change their color\n        animations.push([\"comparision1\", i, j]);\n        //By changing color we imply that we are comparing those two values and then again we should revert back to their original color so push them again\n        animations.push([\"comparision2\", i, j]);\n        if(auxillaryArray[i] <= auxillaryArray[j]) {\n            sortArray.push(auxillaryArray[i++]);\n        }\n        else {\n            sortArray.push(auxillaryArray[j++]);\n        }\n    }\n    while(i <= middleIndex) {\n        animations.push([\"comparision1\", i, i]);\n        animations.push([\"comparision2\", i, i]);\n        sortArray.push(auxillaryArray[i++]);\n    }\n    while(j <= endIndex) {\n        animations.push([\"comparision1\", j, j]);\n        animations.push([\"comparision2\", j, j]);\n        sortArray.push(auxillaryArray[j++]);\n    }\n    for (let i = startIndex; i <= endIndex; i++) {\n        animations.push([\"comparision1\", i, i - startIndex]);\n        animations.push([\"overwrite\", i, sortArray[i - startIndex]]);\n        animations.push([\"comparision2\", i, i - startIndex]);\n        auxillaryArray[i] = sortArray[i - startIndex];\n    }\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}","export function getQuickSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction quickSort(auxillaryArray, startIndex, endIndex, animations) {\n    let pivotIndex;\n    if (startIndex < endIndex) {\n        pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\n        quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\n        quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\n    }\n}\n\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\n    let pivotIndex = randomIntFromInterval(startIndex, endIndex);\n    \n    animations.push([\"comparision1\", pivotIndex, endIndex]);\n    animations.push([\"swap\", pivotIndex, auxillaryArray[endIndex]]);\n    animations.push([\"swap\", endIndex, auxillaryArray[pivotIndex]]);\n    animations.push([\"comparision2\", pivotIndex, endIndex]);\n    swap(auxillaryArray, pivotIndex, endIndex);\n\n    let lessTailIndex = startIndex;\n\n    for(let i = startIndex; i < endIndex; ++i) {\n        animations.push([\"comparision1\", i, endIndex]);\n        animations.push([\"comparision2\", i, endIndex]);\n        if(auxillaryArray[i] <= auxillaryArray[endIndex]) {\n            animations.push([\"comparision1\", i, lessTailIndex]);\n            animations.push([\"swap\", i, auxillaryArray[lessTailIndex]]);\n            animations.push([\"swap\", lessTailIndex, auxillaryArray[i]]);\n            animations.push([\"comparision2\", i, lessTailIndex]);\n            swap(auxillaryArray, i, lessTailIndex);\n            lessTailIndex++;\n        }\n    }\n    animations.push([\"comparision1\", lessTailIndex, endIndex]);\n    animations.push([\"swap\", endIndex, auxillaryArray[lessTailIndex]]);\n    animations.push([\"swap\", lessTailIndex, auxillaryArray[endIndex]]);\n    animations.push([\"comparision2\", lessTailIndex, endIndex]);\n    \n    swap(auxillaryArray, lessTailIndex, endIndex);\n    return lessTailIndex;\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}\n\nfunction randomIntFromInterval(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}","export function getSelectionSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    selectionSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction selectionSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 0; i < N - 1; i++) {\n        let minIndex = i; //Finding minimum element in unsorted array\n        for (let j = i + 1; j < N; j++) {\n            animations.push([\"comparision1\", j, minIndex]);\n            animations.push([\"comparision2\", j, minIndex]);\n            if (auxillaryArray[j] < auxillaryArray[minIndex]) {\n                minIndex = j;\n            }\n        }\n        animations.push([\"swap\", minIndex, auxillaryArray[i]]);\n        animations.push([\"swap\", i, auxillaryArray[minIndex]]);\n        // Swap the found minimum element with the first element\n        swap(auxillaryArray, minIndex, i);\n    }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}","export function getBubbleSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    bubbleSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction bubbleSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    let iters = N - 1;\n    while(iters > 0) {\n        let swapped = false;\n        for(let i = 0; i < iters; ++i) {\n            animations.push([\"comparision1\", i, i + 1]);\n            animations.push([\"comparision2\", i, i + 1]);\n            if(auxillaryArray[i] > auxillaryArray[i + 1]) {\n                swapped = true;\n                animations.push([\"swap\", i, auxillaryArray[i + 1]]);\n                animations.push([\"swap\", i + 1, auxillaryArray[i]]);\n                swap(auxillaryArray, i, i + 1);\n            }\n        }\n        if(swapped === false) break;\n        iters--;\n    }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}","import React from 'react';\nimport './SortingVisualizer.css';\nimport {getMergeSortAnimations} from '../SortingAlgorithms/MergeSort';\nimport {getQuickSortAnimations} from '../SortingAlgorithms/QuickSort';\nimport {getInsertionSortAnimations} from '../SortingAlgorithms/InsertionSort';\nimport {getSelectionSortAnimations} from '../SortingAlgorithms/SelectionSort';\nimport {getBubbleSortAnimations} from '../SortingAlgorithms/BubbleSort';\nlet WINDOW_HEIGHT = window.innerHeight;\nlet NUMBER_OF_ARRAY_BARS = 58;\n\n\nconst PRIMARY_COLOR = 'pink';\nconst SECONDARY_COLOR = 'red';\nconst ANIMATION_SPEED_MS = 5;\n\nconst DISABLED_BUTTON = \"Currently Disabled\"\nconst ENABLED_BUTTON = {\n    nlogn: \"O(NlogN) Time Complexity\",\n    nSquare: \"O(N^2) Time Complexity\"\n}\n\nclass SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: []\n        };\n    }\n    componentDidMount() {\n        this.resetArray();\n    }\n    resetArray() {\n        const array = []\n        for (let i = 0;i < NUMBER_OF_ARRAY_BARS;i++) {\n            array.push(randomIntFromInterval(25,WINDOW_HEIGHT-30)); //random array\n        }\n        this.setState({array: array});\n        this.restoreStoreButtons();\n    }\n    disableSortButtons() {\n        document.getElementById(\"mergeSort\").disabled = true;\n        let buttonStyle = document.getElementById(\"mergeSort\").style;\n        document.getElementById(\"mergeSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"quickSort\").disabled = true;\n        buttonStyle = document.getElementById(\"quickSort\").style;\n        document.getElementById(\"quickSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"insertionSort\").disabled = true;\n        buttonStyle = document.getElementById(\"insertionSort\").style;\n        document.getElementById(\"insertionSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"selectionSort\").disabled = true;\n        buttonStyle = document.getElementById(\"selectionSort\").style;\n        document.getElementById(\"selectionSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"bubbleSort\").disabled = true;\n        buttonStyle = document.getElementById(\"bubbleSort\").style;\n        document.getElementById(\"bubbleSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n    }\n    restoreStoreButtons() {\n        document.getElementById(\"mergeSort\").disabled = false;\n        let buttonStyle = document.getElementById(\"mergeSort\").style;\n        document.getElementById(\"mergeSort\").title = ENABLED_BUTTON.nlogn;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"quickSort\").disabled = false;\n        buttonStyle = document.getElementById(\"quickSort\").style;\n        document.getElementById(\"quickSort\").title = ENABLED_BUTTON.nSquare;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"bubbleSort\").disabled = false;\n        buttonStyle = document.getElementById(\"bubbleSort\").style;\n        document.getElementById(\"bubbleSort\").title = ENABLED_BUTTON.nSquare;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"selectionSort\").disabled = false;\n        buttonStyle = document.getElementById(\"selectionSort\").style;\n        document.getElementById(\"selectionSort\").title = ENABLED_BUTTON.nSquare;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"insertionSort\").disabled = false;\n        buttonStyle = document.getElementById(\"insertionSort\").style;\n        document.getElementById(\"insertionSort\").title = ENABLED_BUTTON.nSquare;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n    }\n    mergeSort() {\n        this.disableSortButtons();\n        const [animations,sortArray] = getMergeSortAnimations(this.state.array);\n        console.log(animations);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const [comparision, barOneIndex, barTwoIndex] = animations[i];\n                const color = (animations[i][0] == \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n                \n            }\n            else {\n                setTimeout(() => {\n                    const [overwrite, barOneIdx, newHeight] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    barOneStyle.height = `${newHeight}px`;\n                  },i * ANIMATION_SPEED_MS);\n            }\n        }\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME); \n    }\n    quickSort() {\n        this.disableSortButtons();\n        const [animations,sortArray] = getQuickSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] == \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [comparision, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [swap, barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }        }\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);  \n    }\n    bubbleSort() {\n        this.disableSortButtons();\n        const [animations,sortArray] = getBubbleSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] == \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [comparision, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [swap, barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }\n        }\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);  \n    }\n    insertionSort() {\n        this.disableSortButtons();\n        const [animations,sortArray] = getInsertionSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [temp, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }\n        }\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME); \n    }\n    selectionSort() {\n        this.disableSortButtons();\n        const [animations,sortArray] = getSelectionSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [temp, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }\n        }\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME); \n    }\n    render() {\n        const array = this.state.array;\n        const SORT_BUTTONS = 6;\n        const TOTAL_BUTTONS = 1 + SORT_BUTTONS;\n        return(\n            <>\n            <div className=\"array-container\" style={{position:'absolute', right:`20px`}}>\n                {array.map((value, idx) => (\n                    <div\n                        className=\"array-bar\"\n                        key={idx}\n                        style={{\n                        backgroundColor: PRIMARY_COLOR,\n                        height: `${value}px`\n                        }}\n                    ></div>\n                ))}\n            </div>\n            <div className=\"buttons\" > \n                <button title=\"Generates a new random array\" style={{position:'relative',top:`${0*(WINDOW_HEIGHT-10)/TOTAL_BUTTONS}px`}} onClick={() => this.resetArray()}>\n                    Generate New Array\n                </button>\n                <button title=\"O(NlogN) Time Complexity\" id = \"mergeSort\" style={{position:'relative',top:`${0.5*(WINDOW_HEIGHT-10)/TOTAL_BUTTONS}px`}} onClick={() => this.mergeSort()}>\n                    Merge Sort\n                </button>\n                <button title=\"O(N^2) Time Complexity\" id = \"quickSort\" style={{position:'relative',top:`${1*(WINDOW_HEIGHT-10)/TOTAL_BUTTONS}px`}} onClick={() => this.quickSort()}>\n                    Quick Sort\n                </button>\n                <button title=\"O(N^2) Time Complexity\" id = \"bubbleSort\" style={{position:'relative',top:`${1.5*(WINDOW_HEIGHT-10)/TOTAL_BUTTONS}px`}} onClick={() => this.bubbleSort()}>\n                    Bubble Sort\n                </button>\n                <button title=\"O(N^2) Time Complexity\" id = \"insertionSort\" style={{position:'relative',top:`${2*(WINDOW_HEIGHT-10)/TOTAL_BUTTONS}px`}} onClick={() => this.insertionSort()}>\n                    Insertion Sort\n                </button>\n                <button title=\"O(N^2) Time Complexity\" id = \"selectionSort\" style={{position:'relative',top:`${2.5*(WINDOW_HEIGHT-10)/TOTAL_BUTTONS}px`}} onClick={() => this.selectionSort()}>\n                    Selection Sort\n                </button>\n            </div>    \n            </>\n        );\n    }\n}\n\nfunction randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default SortingVisualizer;","export function getInsertionSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    insertionSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction insertionSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 1; i < N; i++) {\n        let key = auxillaryArray[i];\n        let j = i - 1;\n        animations.push([\"comparision1\", j, i]);\n        animations.push([\"comparision2\", j, i]);\n        while(j >= 0 && auxillaryArray[j] > key) {\n            animations.push([\"overwrite\", j + 1, auxillaryArray[j]]);\n            auxillaryArray[j + 1] = auxillaryArray[j];\n            j = j - 1;\n            if(j >= 0) {\n                animations.push([\"comparision1\", j, i]);\n                animations.push([\"comparision2\", j, i]);\n            }     \n        }\n        animations.push([\"overwrite\", j + 1, key]);\n        auxillaryArray[j + 1] = key;\n    }\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}","import logo from './logo.svg';\nimport './App.css';\nimport SortinVisualizer from './SortingVisualizer/SortingVisualizer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortinVisualizer></SortinVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}